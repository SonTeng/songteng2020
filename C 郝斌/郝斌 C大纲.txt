//始于20200117，B站郝斌C语言


第1节课
C语言概述

      1.为什么要学习C语言？
	       1.C的起源和发展
		   2.C的特点
		         优点
				       代码量小  速度快  功能强大
				 缺点
			 	       危险性高  开发周期长  可移植性弱
	        3.C语言的应用领域
			     系统软件开发
				       操作系统  驱动程序  数据库
				 应用软件开发
				       办公软件  图像图形多媒体  嵌入式软件开发  游戏开发
			4.C语言的重要性
			     学C不学C++没用处，学完C和C++还要学好数据结构，然后就可以找工作了，也为其他语言学习打下基础
				 “当你成为C语言高手，你就很容易进入到操作系统平台里面去，当你进入到操作系统的平台里去做实际程序时，你就会懂得进行调试，当你懂的调试时候，你就会发现能轻而易举的了解整个平台的架构，这时候，计算机基本上一切就都在你的掌握之中了，没有什么东西能逃得出你的手心”---《编程箴言》 梁肇新
	  2.怎样学习C
	       1.函数和指针两部分最重要
		   2.途径：多思考，多上机
		   3.目标：能看懂程序，能调试程序，自学能力要很强
		   “一个不问为什么的人，不可能了解的会很好”
		   “从看懂程序到敲正确是一个很长的过程，一段时间不学就全忘光了”
	
	  3.学习目标
	       理解面向过程的思想：
		               能看懂程序
					   会调试程序
					   掌握将大问题转化为一系列小问题来求解的思想
			为将来学习C++，Java做准备
	  
	  
	  4.常见问题答疑
	        1.学习Java为什么要先学习C语言？
			     C的语法80%被Java继承，C语言中指针是理解Java中引用的基础
			2.没学过计算机专业课程能学懂C语言吗？
			     32个关键字
				       auto   break   case   char   const   continue   default   do   double   else   enum   extern   float   for   goto   if   int   long   register   return   short signed  sizeof   static   struct   switch   typedef    unsigned   union   void   volatile   while  
			3.数学和英语不好能学号C语言吗？
			
			
	  5.课程计划 
	         分为23讲：*标注重要内
			     基础编程知识   1讲
				 数据类型    1讲
				 运算符和表达式   1讲
				 *流程控制   4讲
				 *函数   2讲
				 数组   1讲
				 *指针   4讲
				 变量的作用域和存储方式   1讲
				 扩展数据类型   1讲
				 专题：
				       字符串的处理   1讲
					   进制转换   1讲
					   补码   1讲   
					   *动态内存分配   1讲
					   综合应用：链表的使用    1讲
				
				
	  
	  6.举例子：一元二次方程
	  
第2节课	  
C语言编程预备知识
     1.cpu  内存条   硬盘   显卡   主板   显示器   之间的关系
	 
	 2.HelloWorld程序如何运行起来的
	 
	 3.什么是数据类型
	         基本类型数据
			     整数：整型（int 4B）、短整型（short 2B）、长整型（long int 8B ）
				 浮点数（实数）：单精度浮点数（float 4B）、双精度浮点数（double 8B）
				 字符：char  1B  注：C语言中没有直接的字符串，只能通过字符数组来实现字符串功能
			 复合类型数据
			     结构体
				 枚举
				 共用体
	 
	 4.什么是变量
	         本质：内存中的一段存储空间
	 
	 5.cpu   内存条  IDE   操作系统  之间的关系
	 
	 6.变量为什么必须的初始化
	         所谓初始化，就是赋值的意思
	 
	 7.如何定义变量
	         变量类型   变量名 = 要赋初值；
			 等价于
			 变量类型   变量名；
			 变量名 = 要赋初值；
	 
	 8.什么是进制
	         十进制 5
			 二进制 0101
			 八进制 05
			 十六进制 0x5
	 
	 9.常量在C语言中是如何表示的
	         整数：
			     十进制：传统写法
				 十六进制：前面加0x或0X
				 八进制：前面加0
			 浮点数 
			     传统写法
				       float x = 3.2;
				 科学计数法
				       float x = 3.2e3;  //x的值是3200
					   folat y = 123.45e-2;   //y的值是1.2345
			 字符 
			     单个字符用单引号括起来   例 'A'
				 字符串用双引号括起来   例“ABC”
				 注：字符串“A”正确，因为“A”包含了'A‘和'\0'的组合，即所有的字符串末尾都有'\0’作结束符。
	 
	 10.常量是以什么样的二进制代码存储在计算机中的
	         编码：
			     例：int  i = 86;
				 整数是以补码的形式转换为二进制代码存储
				 实数是以IEEE754标准转化为二进制代码存储
				 字符的本质实际上与整数的存储方式相同
				 十进制：86
				 原码：01010110
				 补码：01010110
				 
				 字符  'A'（存储，先转为ASCII，再补码）
				 ASCII：A   --->  65
				 补码：01000001
	  
	  
	  
招聘
51job 
智联招聘
    C/C++
	java
	C#
	
	
第3节课
//20200203
//课程26-37
     11.代码规范化
	        目的：使代码易读，减少代码出错情况
	         1.书：林锐 《高质量C/C++编程》
			 2.注释：占代码量的1/3
			 3.符号：成对
			 4.缩进：地位相等不需要缩进，内部代码需要缩进
			 5.换行：依功能块区分
			 6.一般程序的三个部分：定义变量，对变量进行操作，输出值
			 7.空格：在运算优先级最低的地方敲空格
	 12.什么是字节
	         1.字节：存储数据的单位，并且是硬件所能访问的最小单位。1B=8bit 1KB=1024B 1MB=1024KB 1GB=1024MB
	 13.不同类型数据之间相互赋值的问题
	         int i = 45;
			 long j = 102345;
			 i = j;//不同类型数据之间相互转换是否会丢失数据
			 printf("%d %d\n",i,j);
			 float x = 6.6;
			 double y = 8.8;
			 printf("%f  %f\n",x,y);
			 注：只有学会补码，才能了解这部分内容。这部分知识只在C语言或C++中出现，在Java中不需要学习。
	 *14.什么是ASCII
	         1.ASCII不是一个值，而是一种规定，字符在存储上本质和整数的存储方式是相同的
			 2.ASCII规定了不同的字符是使用哪个整数值表示的问题
			 3.例如，'A'-->65, 'B'-->66, 'a'-->97,'0'-->48
			 注：除了ASCII外，还有GB312, UTF-8等码。C语言采用的就是ASCII码
	 15.字符的存储【字符本质上与整数的存储方式相同】
	         1.C语言中通过使用ASCII码来实现字符和整数的相同存储方式
			 2.printf() //输出函数 将变量的内容格式化输出到显示器
			     四种用法：
				   1.printf("字符串\n")
				   2.printf("输出控制符\n",输出参数)
				   3.printf("输出控制符1，输出控制符2 ...",输出参数1,输出参数2.....);
				   4.printf(“输出控制符 非输出控制符”，输出参数); //非输出控制符：转义字符等，凡是以%开头的多为输出控制符
				   注释：输出控制符包含如下：
				   %d                      --    int
				   %ld                     --    long int
				   %c                      --    char
				   %f                      --    float
				   %lf                     --    double 
				   %x(或者%X或者%#X或者%#x):      --   int 或 long int 或 short int 
				   例如十进制数字10，%#X输出结果为0XA 
				   推荐十六进制以%#X的方式输出
				   %o                      --    以八进制输出  int 或 long int 或 short int 
				   %s                     --     字符串输出
				   
				   为什么需要输出控制符
				       1. 01组成的代码可以表示数据也可以表示指令
					   2. 如果01组成的代码表示的是数据的话，那么同样的01代码以不同的格式输出则会显示出不同的输出结果
				   
			   scanf()  //输入函数
			   
			   
			   
第4节课
//20200206
//课程38-46
     1.scanf()函数的用法：
	         1.通过键盘将数据输入到变量中
			 2.两种用法：
			     用法一：scanf("输入控制符"，输入参数);
				       功能：将从键盘输入的字符转化为输入控制符所规定格式的数据，然后存入以输入参数的值为地址的变量中。
					   注：我们从键盘中输入的全部是字符，必须由输入控制符转换为所需格式。
				 用法二：scanf("非输入控制符",输入参数);
				       功能：将从键盘输入的字符转化为输入控制符所规定格式的数据，然后存入以输入参数的值为地址的变量中。
					   非输入控制符必须原样输入
					   
				如何使用scanf编写出高质量代码
				       1.使用scanf之前最好先使用printf提示用户以什么样的方式来输入
					   2.scanf中尽量不要使用非输入控制符，尤其是不要用\n
					   3.应该编写代码对用户的非法输入做适当处理【非重点】
					         while((ch = getchar())!='\n')
	                               continue;
	2.运算符			 
		算术运算符		 
			+    —    *    /（除）     %（取余数）	 
				 
		关系运算符		 
			>    >=    <    <=    !=    ==    	 
				 
		逻辑运算符		 
			！（非）	&& （与）    ||（或）
			&&或||最终的值要么是真要么是假
			C语言对真假的处理：非0是真，0是假，真用1表示，假是用0表示。
			&&：左边的表达式为假，右边的表达式肯定不会再执行。
			||：左边的表达式为真时，右边的表达式肯定不会再执行。
				 
		赋值运算符		 
			=    +=    *=   /=   -=	 
				 
		优先级别：
		    算术>关系>逻辑>赋值
				 
		关于除法运算符：		 
			结果与运算对象的数据类型有关，两个数都是int型，则商也是int型，若商有小数部分，则截取小数部分；若被除数和除数中只要有一个或两个都是浮点数，则商也是浮点类型，不截留小数。	 
				 
		关于取余运算符：		 
			运算对象必须是整数，结果是整数后的余数，其余数符号与被除数相同。	 
		
        附录的一些琐碎的运算符知识
            自增   自减   三目运算符   逗号运算符
            注：大部分在实际中都已经不用了
            1.自增：
			       前自增：++i
				   后自增：i++
				   两者异同：
				   相同点：最终都是i的值加1
				   不同点：前自增整体表达式的值是i+1之后的值，后自增整体表达式的值是i+1之前的值
				   不懂的话，写个程序，打印输出一下就明白了。
				   例如i=3，i++：先执行i=3，再执行i+1=4；++i：先执行i+1=4，再执行i=4，即对于++和i，两者哪个在前，先执行哪个。
				   为什么会出现自增：
				           代码更精练
						   自增速度快：计算机组成原理：i =i+1(或i+=1） 而i++是直接放置在CPU中寄存器中运算的
				    自增学习需明白的几个问题：
					       编程时应尽量屏蔽前自增和后自增的差别
						   自增表达式最好不要作为一个更大的表达式的一部分来使用
						   
            2.自减：原理同自增			
			3.三目运算符：
			     格式：A?B:C
				 意义： if(A)
				                   B
							   else
							       C
			例：int i = (1>0)?2:3;  最终输出的结果为i=2
			4.逗号表达式
			     格式：（A，B，C，D）
				 功能：从左到右依次执行，最终表达式的值是最后一项的值
				 例如：int p = (2,3,4,5);则等价于 int p = 5;
				             int i = 3;int p = (i++,++i,i+2,i-3);则p = 2 而不是p=4，因为i+2尽管执行了，但执行结果没有对i做新赋值; //从左到右依次执行
				 
第5节课
//20200219
//*流程控制 课程47-74

	 1.什么是流程控制？
         程序代码执行的顺序

     2.流程控制的分类	 
		 顺序执行

         选择执行
             定义：
			       某些代码可能执行，也可能不执行，有选择的执行某些代码
			 分类：
			       if
				       1. if最简单的用法
					         格式：if (表达式)
							                     语句
							 功能：如果表达式为真，则执行语句，如果不为真，则不执行。
					   2. if的范围问题
					         	if (0)
	                                printf("aaaaa!\n");    //语句A
	                                printf("ababab!\n");   //语句B
								结果是只输出ababab，说明第二个printf不是if的范围内执行语句，即语句B一定会执行，不论语句A是否执行。
								即：默认只能控制一个语句的执行或不执行，如果想控制多个语句的执行，可以用大括号把它们括起来								    
					   3.if...else...的用法
					             else默认也只能控制一个语句的执行
								     	if (0)
	                                         printf("bbbbb!\n");   //语句A
	                                    else
	                                         printf("bcbcbc!\n");  //语句B
	                                         printf("dddddd!\n");  //语句C
										结果：语句C一定会执行，因它不属于if else语句
					   4.if...else if...else...的用法
					             格式：
								 if (1)
								      A;
								else if (2)
								      B;
								else
								      C;
							注：只会执行一个，例如当1，2同时成立时，只会执行A语句，B语句不执行。		  
					   5.C语言对真假的处理 
					             非零为真，零就是假
								 真用1表示，假是用0表示
					   6.if举例--求分数的等级
					   7.if的常见问题解析
					        以下类似这种数学题，可以当作废话处理，无视它
					         1.判断一个数字是否是素数
							 2.判断一个数字是否是回文数
							 3.编程实现求一个十进制数字的二进制形式
							 4.把一个数字的每位是奇数的数字取出来组合成新数字
							 5.求一个数字前后颠倒后的数字
							 
							 常见错误解析：
							 1.空语句问题，即if(条件判断); 这个分号就是空语句
							     if(表达式)；
								 等价于
								 if(表达式)
								       ;   //这是个空语句
							2.if(表达式1)
							       A；
								else
								   B;
								是正确的
								if(表达式1);
								   A;
								else
								   B;
								是错误的
							3.if(表达式1)
                                  A；
                                else if(表达式2)
                                   B；
                                else if(表达式3)
                                   C；
                                else
                                   D;								
							 当表达式1和表达式2同时成立时，只会执行A语句，B语句不会执行
							4.if(表达式1)
                                  A；
                                else if(表达式2)
                                   B；
                                else if(表达式3)
                                   C；
								没有最后的else语句，这样写语法不会出错，但逻辑上有漏洞
							5.if(表达式1)
                                  A；
                                else if(表达式2)
                                   B；
                                else if(表达式3)
                                   C；
                                else  (表达式4)
                                   D;
					            这样写是不对的，要么去掉表达式4，要么在其前面加上if
							6.if(表达式1)
                                  A；
                                else if(表达式2)
                                   B；
                                else if(表达式3)
                                   C；
                                else  (表达式4)；
                                   D;
								等价于
								if(表达式1)
                                  A；
                                else if(表达式2)
                                   B；
                                else if(表达式3)
                                   C；
                                else  
								   (表达式4)；    //无实际意义语句
                                   D;
								 语法上无错误，但逻辑上讲不通
				   switch
				      用的很少，留待后讲
					  switch(表达式)      // switch选择执行
					  {
					     case 常量表达式1:       //case和default是程序的入口，自上到下先匹配后排他执行
						         语句1;
								 break;   //终止switch，后面的代码不再执行，如果注销掉，则继续执行下一个case，直到遇到break
						case 常量表达式2:
						         语句2;
								 break;
						default:
						         C;
								 break;
					  }
					  注：所有case后面的常量表达式为了便于描述，姑且称为标签，这些标签都只能是(1)枚举常量(2)数值常量(3)字符常量(4)常变量(5)宏名的一种，注意普通变量，枚举变量是不能作为标签使用的  
					  注：switch后面括号里的“表达式”允许是任何类型的
					  注：switch是唯一进行判断的地方，case语句本身不做判断，只是起语句标号作用，用来匹配switch后面括号中的“表达式”
					  注：switch是选择不是循环，如果在switch中出现了break语句，只是推出switch语句转去执行switch下面的语句，在switch中出现continue是错误的，除非switch本身就属于for或while循环的一部分。
					  
         循环执行
                定义：
                         某些代码会被重复执行
                分类：
                         for语句
						 1.说明：for语句类似if语句，只控制其后面的一个语句的执行；
							 for(1;2;3)
							    4;
							执行顺序：一轮执行1243，3执行完之后标志着一轮循环结束，此时再执行2，如果成立，则再执行43，当2不再成立时，结束循环。这一过程中1只执行一次。
							例如：
							for(i =1;i<10;i+=2)
							   printf("hhhh\n");
							printf语句执行几次，说明循环了几次。
						 2.for语句中嵌套if语句
						 例题：
						 1+2+3+...+100
						 1+1/2+1/3+...+1/100 （注意：强制类型转换）
						 浮点数存储带来的问题
						    double和float都不能保证可以精确的存储一个小数
							举例：给定一个浮点型变量x，如何判断x的值是否是0。
							 分析：不可用if(0==x)，因为x是存入的浮点型，例如99.9可能存入的是99.900002
							 正确方法是if(|x-0|<=0.000001)
							 整型变浮点型：
							 int x;
							 可以写为  (float)x转化为浮点型，也可以1.0*x  注：1.0默认是double类型
						   注：循环更新的变量，一般为i，不能写成浮点格式，最好是int型，因为浮点型是非准确存储。（浮点型只是不能保证每个数都是准确存储，但有些数字还是可以的）
						   实验方法，用float x = 一个数，然后以%f输出，有的数可以同样输出，有的数输出则不同
						   3.for循环嵌套
						       for(1;2;3)
							       for(4;5;6)
								       A;
									   B;
							执行次序说明：先执行1，2，4，5，A，6，再判断5是否还满足，如果满足，则循环执行5，A，6，如果不满足，则执行3，再从2，4，5，A，6循环执行，2如果不成立，则执行B，B执行结束后程序结束。PS.for语句类似if语句，只控制其后面的一个语句的执行。对于for(1;2;3)这个for语句而言，整个for(4;5;6)A是一个语句，对于for(4;5;6)而言，A是一个语句，B从始至终是一个独立于两个for循环的语句。
							4.判定：一个语句
							   for(1;2;3)    //L1
							       for(4;5;6)   //L2
								   {
								          A;       //L4
										  B;       //L5
										  for(7;8;9)   //L6
										     C;    //L7
								   }
								分析：对L1的for语句来说，整体只是一个语句，对L2的for循环来说，整体只是一个语句，但这个语句由大括号界定，在这个大括号中有L4,L5,L6三个语句，对L6这个for循环来说，整体只是一个语句，这个语句中只包含L7这一个语句。
								
								
						 while语句
						    1.执行顺序
							   格式：
							       while(表达式)
								        语句；
								   如果表达式成立，则执行语句，语句执行完后，则再判断表达式，如不成立，则结束循环。
								   注：while语句与if语句，for语句一样，后面只跟着一条语句。
							2.与for的相互比较
							     两者等价，可以相互转换，但优先使用for循环：
							     int i;
								 for循环：
								 for(i=1;i<101;i++)
								     A;
							     等价的while循环：
								 i=1;
								 while(i<101)
								 {
								    A;
									i++;
								}
							3.举例
							    1.回文数：从键盘输入一个数字，如果这个数字是回文数，则返回yes，否则返回no。
								回文数：关于中间数字对称。如121，12321，1221等。
								2.斐波那契数列：F(1)=1，F(2)=1，F(n)=F(n-1)+F(n-2)
								 例如：1，1，2，3，5，8，21，34
								
							4.什么时候使用while，什么时候使用for
							      没法说清楚，用多了就知道了，尽管for比while用的相对较多
						 do...while语句
						     主要用于人机交互 如一元二次方程等
							 格式：
							 do
							 {
							     。。。。
							 }while(表达式);  //这个分号不能省
							 注：do while和while不等价，前者至少执行一次，后者则不然
                break和continue		
				      break:
					       break如果用于循环是用来终止循环，可在循环中直接使用，结束循环 。
						   注：在多层嵌套循环中，break只能终止距它最近的循环。
						   break如果用于switch，则是用于终止switch
						   注：在多层嵌套switch中，break终止它所在的那一层循环。
						   break不能直接用于if，除非if属于循环内部的一个子句。
						       例如：
							      if(3>2)
							         break; 
								这种用法是错误的
								  for(i=0;i<5;i++)
								       if(3>2)
									      break;
								这种写法则是正确的，此时，break不是终止if语句，而是终止for语句
					  continue:
					        用的很少 
					        用于跳过本次循环余下语句，转去判断是否需要执行下次循环。
							for(1;2;3)
							{
							      A;
								  B;
								  continue; //先执行1，2，A，B，如果执行本continue语句，则下面会转去执行3，而跳过执行C和D
								  C;
								  D;
							}
							while语句中continue的用法也类似，但是当把for转化为while语句时，一定要把for语句中的3放到continue的上面。
							int i = 0, s = 0;
							do
							{
							    if(i%2)
								{
								    i++;
									continue;    //continue用来控制循环语句，如for，while，do...while，而if语句不是循环语句，所有此处continue语句之后，将回去执行while(i<7)，而不再执行i++和s+=i
								}
                                i++;
                                s+=i;								
							}while(i<7)
							

第6节课
//20200405
//	进制和运算符 75-78
      
      进制：
             1.什么叫n进制：
                   逢n进1
				   例：五进制下234表示：4+3*5+2*5*5=69(十进制）
				   
				   在汇编中：在数字后面加字母B表示二进制数
				                                                       O        八
																	   D        十
																	   H        十六
             2.把r进制转成十进制

             3.把十进制转成r进制
			       总的方法：除r取余，直至商0，余数倒序排列
                   例：把十进制下185转换成二进制表示
				   方法：不停的除2取余，然后把所有余数倒过来读即是。
				   结果：185D == 10111001B
             4.不同进制所代表的数值之间的关系
                   十进制下的3981转化成十六进制下的F8D
                    3981D和F8DH所代表的本质上都是同一个数字，只不过这个数字在不同进制下的表现形式下不同
      补码：					
	
      运算符：	

学C语言为什么无法做出像样东西？
路线：C-->SQL-->Java SE-->HTML-->Java Web(Java EE)			 
				 
第9节课 
//20200408
//数组		

      为什么需要数组
             为了解决大量同类型数据的存储和使用
			 为了模拟现实世界，如一维直线，二维平面，三维空间，四维空间+时间。
      数组的分类
             一维数组
                       怎样定义一维数组
					         为n个变量连续分配存储空间
							 所有的变量数据类型必须相同
							 所有变量所占的字节大小必须相等
							 
							 例如：int a[5];
						有关一维数组的操作
						     初始化
							      完全初始化 
								       int a[5] = {1,2,3,4,5};
							      不完全初始化，未被初始化的元素自动为零
								       int a[5] = {1,2,3};
								  不初始化，所有元素为垃圾值
								       int a[5];
								  清零
								       int a[5] = {0};									  
								  错误写法
								       int a[5];
									   a[5] = {1,2,3,4,5}； //错误，因为a[5]仅仅是一个不存在的元素。
									   注：只有在定义数组的同时才可以整体赋值，其他情况下整体赋值都是错误的
									   int a[5] = {1,2,3,4,5};
									   int b[5];
									   如何把a数组中的值全部复制给b数组？
									        错误写法：
											     b = a; //a,b代表的是数组中第一个元素的地址，数组不可直接赋值，变量可以直接赋值，对数组来讲，数组本身不是变量，数组中的元素才是变量，比如b[1] = a[1]；
										    正确写法：
											     for(i=0;i<5;i++)
												     b[i] = a[i];
									   注：一维数组名不代表数组中的所有元素，而是代表数组第一个元素的地址
							 赋值
							 排序
							 求最大值/最小值
							 倒置
							 查找
							 插入
							 删除
							 
             二维数组
			     初始化：
                       int a[3][4]
					   总共是12个元素，可以当作3行4列看待，这十二个元素的名称分别是a[0][0]、a[0][1]、a[0][2]、a[0][3]、a[1][0].......a[2][3]
					   a[i][j]表示第i+1行第j+1列
					   int a[m][n]中最大位置的元素表示方法为a[m-1][n-1]
					   
					   初始化：
					   int a[3][4] = {1，2，3，4，5，6，7，8，9，10，11，12}；
					   或者
					   int a[3][4] = {
					           {1，2，3，4}，
							   {5，6，7，8}，
							   {9，10，11，12}
					   }；
			     操作：
					   输出二维数组：
					   	     for(i=0;i<3;i++)
	                         {
		                         for(j=0;j<4;j++)
	                                 printf("a[%d][%d] = %-2d   ",i,j,a[i][j]);
		                         printf("\n");
	                         }
					   对二维数组排序
					   对每一行求最大值
					   判断矩阵是否对称
             多维数组			
			     是否存在多维数组？
				       不存在
					   因为内存是线性一维的
					   n维数组可以当作每个元素是n-1维数组的数组（结合线性代数中矩阵理解）
					   例如：int a[3][4]；
					             可以当作是一个含有3个元素的一维数组，
								 只不过这3个元素中的每一个元素都可以再分成4个小元素
								 
								 同理
								 int a[3][4][5]
								 也可以理解为该数组是含有3个元素的一维数组
								 只不过每个元素都是4行5列的二维数组
								 
第10节课
//20200408
//函数 -- 面向过程
//C语言的基本单位不是语句，是函数

             为什么需要函数
                   避免了重复性操作，有利于程序的模块化（模块化程度越高，程序健壮性相对越强）
             什么叫做函数
                   逻辑上：能够完成特定功能的独立的代码单元
				   物理上：能够接收数据，（当然也可以不接收数据，形参为void）
				                   能够对接收的数据进行处理，
								   能够将数据处理的结果进行返回。（当然也可以不返回任何值（函数名前面加void））
				   总结：函数是个工具，为了解决大量类似问题而设计的
				               函数可以当作是一个黑匣子，给定输入给出输出而隐藏细节
             如何定义函数
			           函数返回类型   函数名(函数的形参列表)
					   {
					               函数的执行体；
					   }
					   
					   1.函数定义的本质是详细描述函数之所以能够实现某个特定功能的具体方法
					   2.return表达式;  的含义：
					       终止被调函数，向主调函数返回表达式值：return后面可以写值也可以不写值，它是用来终止函数的，参考break终止for循环，但return即使是使用在函数中的for循环中的，它终止的依然是函数，而不仅仅是for循环。
						   如果表达式为空，则只终止函数，不向主调函数返回任何值。
						   注:break是用来终止循环和switch的，而return是用来终止函数的
						   例1：
						      void f()
							  {
							         return;  //仅仅是终止函数，不向主调函数返回任何值
							  }
						   例2
						      int f()
							  {
							      return 0;  //终止函数，并向主调函数返回10
							  }
					   3.函数返回类型也称为函数类型，如果和函数执行体中的返回值类型如果不一致，则以函数返回类型为准
					      例如：
						     int f()   //f的返回类型为int类型 
                             {
	                               return 10.6;  //return返回为float类型 
                             }
							 //最终，如果调用f函数，返回的值是10

             函数的分类
                   有参函数和无参函数：如果无参数，则声明函数时为void func(void){}，关键是第二个void
				   有返回值函数和无返回值函数
				   库函数和自定义函数
				   普通函数和主函数：一个函数必须有且只有一个主函数(mian)，因为主函数是程序的入口/出口，主函数可以调用普通函数，普通函数不能调用主函数。普通函数之间可以相互调用。
             注意的问题
			       函数调用和函数定义的顺序，如果调用放在定义的前面，则会出错，故需要在调用前需先声明函数；
				   
			 函数的声明
			       函数的声明，函数具体实现在main函数下面，那么在main中使用它时需要提前声明 
				   函数声明的目的，告诉编译器，这是个函数，避免出错
				   函数前置声明：
				           1.告诉编译器即将可能出现的若干个字母代表的是一个函数
						   2.告诉编译器即将可能出现的若干个字母所代表的函数的形参和返回值的具体情况
						   3.函数声明是一个语句。末尾必须加分号
						   4.对库函数的声明是通过 #include<库函数所在的头文件的名字.h>来实现的
				   注：
				       函数声明时可以不写形参，在实现时再也也可以
					   下面两种声明是等价的
					   void func(int,int);
					   void funt(int a,int b);
			 
			 实参和形参
			       形参：
				   实参：
				   联系：个数相同，位置一一对应，类型至少要兼容（如int,float,double等）
				   
		   *如何在软件开发中合理的实际函数来解决实际问题
			       一个函数的功能尽量独立，单一
				   多学习，多模仿牛人的代码
			
			 函数是C语言的基本单位，类是Java，C#，C++的基本单位
             常用的系统函数
			       数学函数：
				       double sqrt(double x);
					         求x的平方根
					   int abs(int x);
					         求x的绝对值
					   double fabs(double x);
					         求x的绝对值

             专题：
                   递归：			
                         栈：
                         可参考郝斌的数据结构网课视频			
      
             变量的作用域和存储方式
                   按作用域分：
                         全局变量
                             在所有函数外部定义的变量叫做全局变量
                             全局变量的使用范围从其定义的位置开始到整个程序的结束							 
                         局部变量
						     在一个函数内部定义的变量，或者是函数的形参，统称为局部变量。
							 局部变量的使用范围：只能在本函数内部使用
						注：全局变量和局部变量命名冲突的时候：在一个函数的内部，如果定义的变量名称和全部变量名称一样，则在该函数内部，局部变量会屏蔽掉全局变量。
                   按变量的存储方式分：
                         静态变量
                         自动变量
                         寄存器变量		

第11节课
//20200410
//指针：121-150				
引入（热身）：
=======================================================================================
/**
    2020年4月10日 22点55分
	指针 ：和地址是同一个含义 
	指针就是地址，地址就是指针，地址就是内存单元的编号，所以也可以理解为指针只是个值，而这个值只是在内存编号中有意义 
	指针变量：存放指针/地址的变量 ，指针和指针变量是两个不同的东西
	但需要注意：通常叙述时，会把指针变量简称为指针，实际上两者含义并不相同，而指针(编号)本身并没有意义，而变量的存放才有意义，所以我们所说的指针其实是指针变量的意思，在使用时心里明白就行，不用一定强行区分的十分清楚。 
*/

#include<stdio.h>

int main(void)
{
	int *p; //p是变量的名字，int * 表示p变量存放的是int类型变量的地址
	//p是int *类型，*p是int类型
	//此句代码意思是：一个名叫p的变量，只能存放整型变量的地址
	//一个变量，代表在内存中的一个地址 
	//int *p不表示定义了一个名叫*p的int型变量，而是表示p是变量名，其类型是int *，而int *表l类型示的是存放int类型变量地址的类型 

	int i = 3;
	
	// p = i; //错误：因为类型不一致，p只能存放int类型变量的地址，不能存放int类型变量/值
	// p = 55;//错误，原因同上 
	
	p = &i; //把i的地址赋值给p变量，p保存i的地址，所以p指向i，所以*p就是i。
	
	/**
	*1.p保存了i的地址，因此p指向i
	*2.p不是i，i也不是p，修改p的值不影响i的值，修改i的值也不影响p的值 
	*3.p叫做指针变量，普通变量只能存放值，而指针变量可以存放地址 
	*4.如果一个指针变量，指向了某个普通变量，则 *指针变量 就完全等同与普通变量
	*  例如：int *p; p = &i; 则*p完全等同于i，即在所有出现i的地方都可以替换成*p
	*5.*p表示以p中的内容为地址的变量   //而变量就是声明地址的意思。 
	*/ 
	
	printf("%d\n",*p); 
	
	//printf("%d\n",p);
	//printf("%d\n",&i);
	//两对等同：*p与i，p与&i，可相互替换 
	
	int j;
	j = *p;
	printf("i = %d, j = %d, *p = %d\n",i,j,*p);
	 
	return 0;
}
=======================================================================================

         指针：
		     附注：
			     *的含义：
				       1.乘法
					   2.定义指针变量
					         int *p; //定义了一个名字叫p的变量，int *表示p只能存放int变量的地址
					   3.	 指针运算符
					         该运算符放在已经定义好的指针变量的前面
							  如果p是一个已经定义好的指针变量
							  则*p表示以p中的内容为地址的变量
				 如何通过被调函数修改主调函数普通变量的值
				       1.实参必须是该普通变量的地址，而不是该变量名；
					   2.形参必须为指针变量；
					   3.在被调函数内部，通过 "*形参名 = ......." 的方式来修改主调函数相关变量的值。			  
		     指针的重要性：
                 表示一些复杂的数据结构（链表、图等）
                 *快速的传递数据，减少内存耗用
                 *使函数返回一个以上的值（ruturn只能返回一个值，终止函数）
                 能直接访问硬件 如取地址&i
                 能够方便的处理字符串  
				       两种方式：字符数组或字符指针
					   参考结构体部分，传递地址比传递内容占用的内存更小，执行速度更快
					   e.g.  在结构体中某成员为char name[20]; 然后定义变量st,则可以通过strcpy(st.name,"zhangsan");
                 是理解面向对象语言中引用的基础
                 总结：
                       指针是C语言的灵魂			 
		 指针的定义
             地址：
			       内存单元的编号，从0开始的非负整数，范围：以4G内存条(2^32B=4*2^30B=4GB)为例，则为(0,4G-1)
			 指针： 
			       指针就是地址，地址就是指针
				   指针变量就是存放内存单元编号的变量，或者说指针变量就是存放地址的变量，指针变量和指针是两个不同的概念，但需要注意：通常叙述时，会把指针变量简称为指针，实际上两者含义并不相同。
				   指针的本质就是一个操作受限的非负整数，比如指针不允许相加/乘/除，但可以相减。
         指针的分类
           *1.基本类型指针
			 
			 2.指针和数组
			     指针和一维数组(必须掌握)
				       数组名
                           一维数组名是个指针常量,例如 int a[5]; //a 不能改变，这样的操作时不对的，如 a=3;或a=&a[2];
						   它存放的是一维数组中第一个元素的地址  即：可用printf("%#X  %#X\n",a,&a[0]);两者结果相同
					   下标和指针的关系
					       如果p是个指针变量，则
						         p[i] 永远等价于 *(p+i)  //即p[0] = *p;

					   确定一个一维数组需要几个参数：
					       即如果一个函数要处理一个一维数组，则需要接收该数组的哪些信息?
						     需要两个参数：数组首地址，数组长度  e.g. void f(int *pArr,int len)
                           注：当把一维数组做实参传递给上面的函数f时，这两个操作是等价的，pArr[2]和*(pArr+2)
						      同时，这两个操作也是等价的，a[3]和*(a+3)
							  这反应了数组和指针的本质。
					   指针变量的运算
					       指针变量不能相加/乘/除，但可以相减。
						   如果两个指针变量指向的是同一块连续空间中的不同存储单元，则这两个指针才可以相减
                       一个指针变量到底占几个字节？
					       预备知识：
						     sizeof(数据类型)
							 功能：返回值就是该数据类型所占的字节数

							 siezof(变量名)
							 功能：返回值是该变量所占的字节数

                           假设p指向char类型变量，占1个字节
						   假设q指向int类型变量，占4B
						   假设r指向double类型变量，占8B
						   p,q,r，这三个指针变量本身所占的字节数是一样的，64位系统下均为8个字节（8B），32位系统则为4B
                           结论：在64位系统下，一个指针变量，无论它指向的变量占几个自己，这个指针变量本身占64/8=8个字节
						        如果是32位系统下，或者编译平台为32位，则指针变量占4B。

				 指针和二维数组(难度较大)
			 
			 3.指针和函数
			 
		   *4.指针和结构体
			 
			 5.多级指针


			 专题：
			     动态内存分配
				       传统数组的缺点：（本质上传统的静态内存分布问题）
                           1.数组长度必须事先指定，且只能是常数，不能是变量。
						     e.g. int a[5];//ok
							      int len=5;int a[len];//Error  注：以现在的C标准是可以的，但这个老师的网课视频是2009年的
						   2.传统形式定义的数组，该数组的内存，程序员无法手动释放。（运行完毕后，又系统自动释放）
						   3.数组一旦定义，系统就会为该系统分配的存储空间就会一直存在，除非数组所在的函数运行结束。
						      即：在一个函数运行期间，系统为该函数中数组所分配的空间会一直存在，直到该函数运行完毕时数组的空间才会释放。
						   4.数组的长度一旦定义就不能再改变
						      数组的长度不能在函数运行的过程中动态的扩充或缩小。
						   5.A函数定义的数组，在A函数运行期间，可以被其他函数使用，但A函数运行结束之后，A函数中的数组，将无法再被其他函数使用。
                             即:传统形式定义的数组不能跨函数使用
					   为什么需要动态内存分配：
                           因为可以很好的解决静态内存分配的缺点。
						   传统数组也叫做静态数组。
						   注：凡是malloc函数分配的皆是动态内存分配，其他的则是静态内存分配。
					   动态内存分配举例_动态数组的构造

					   静态内存分配和动态内存分配的比较
					       静态分配是由系统自动分配，由系统自动释放
						   静态内存是在栈中分配的
						   动态内存由程序运手动分配，手动释放。
						   动态内存是已对分配的（所以可以跨函数使用）

					   跨函数使用内存的问题

				注：malloc和realloc的区别，看书解决。


第12节课
//20200415
//结构体  151-164
        		 
				 
         为什么需要结构体
             为了表示一些复杂的事物，而普通的基本类型无法满足实际要求
		 什么叫结构体
		     结构体是一个把一些基本数据类型组合在一起形成的新的复合数据类型
		 如何定义一个结构体
		     三种方式（主要掌握第一种，后两种不推荐使用）
			 1.
			     struct Student
                 {      
	               int age;
	               float score;
	               char sex;
                 };
				 使用时：
				 Student st1 = {18,80.5,'m'};
				 printf("%d\n",st1.age);
			 2.
			 	 struct Student
                 {      
	               int age;
	               float score;
	               char sex;
                 }st2;
			 3.
			     struct 
                 {      
	               int age;
	               float score;
	               char sex;
                 }st3;
		 怎样使用结构体变量
		     赋值和初始化
			     定义的同时可以整体赋初值
				 如果定义完变量之后，则只能单个的赋初值。
			 如何取出结构体变量中的每一个成员
			     1.变量名.成员名
				     例如：printf("%d\n",st1.age);
				 2.指针变量->成员名  (也可以写作 (*指针名).成员名)
				     例如：先定义一个指针变量
					   struct Student *p = &st1;
					   printf("%d\n",p->age);
					   注：在计算机内部 p-age会被转换成(*p).age，没有为什么，这就是->的含义。
			 结构体变量的运算
			     结构体变量不能相加/减/乘/除 
				 但结构体变量可以相互赋值
				 e.g. st1 = st2; //写法正确
			 结构体变量和结构体变量指针作为参数传递的问题
			     实际上是在讲指针的优点  对比：传递地址和传递内存：在安全性，耗用内存大小和执行速度三个方面
				     指针的优点之一：
                     快速的传递数据，
                     耗用内存小，
                     执行速度快
				 推荐使用结构体指针变量作为函数参数传递
			 
			 
			 举例：
			     动态构造存放学生信息的结构体数组
				   动态构造一个数组，存放学生的信息，然后按分数输出

			 链表：
			     注：学数据结构就是学数据的存储和操作，写程序=数据的存储+操作+输出
				    而学数据的存储和操作必须懂指针，只能用C语言学，而不能用Java等语言学数据结构

				 专业术语：
				   头结点：头结点的数据类型和首节点的类型是一模一样的，头结点是首节点前面的那个节点，本身并不存放有效数据，设置头结点的目的只是为了方便对链表的操作
				   头指针：存放头结点地址的指针变量
				   首节点：存放第一个有效数据的节点
				   尾结点：存放最后一个有效数据的节点

				 确定一个对数组的操作函数，需要两个参数，数组地址和数组长度
				 确定对链表的操作只需要一个参数，头指针

				 算法：
				       通俗定义：
					       解题的方法和步骤
					   狭义定义：	
					       对存储数据的操作，对不同的存储结构，要完成某一功能所执行的操作是不一样的。 
						   比如：
						       要输出数组中的所有元素的操作和要输出链表中所有元素的操作肯定是不一样的
						   这说明：
						       算法是依附于存储结构的，不同的存储结构所执行的算法是不一样的
					   广义算法：
					       广义的算法叫做泛型
						   无论数据是如何存储的，对该数据的操作都是一样的
				   我们至少可以通过两周数据结构来存储数据
				       数组：
					       优点：存取速度快
						   缺点：需要一个连续的很大的内存，插入删除元素的效率很低
					   链表：
					       优点：插入删除元素效率高，且不需要一个连续的很大的内存
						   缺点：查找某个位置的元素效率低


第13节课
//20200417
//枚举、进制转换、补码、链表
//第165-
         枚举：
		   什么是枚举
             把一个事物所有可能的取值一一列举出来
		   怎样使用枚举

		   枚举的优缺点
		     代码更安全
			 书写麻烦，用的不多



		 进制转换
		   十进制转r进制
		       方法：除r取余，直至商0，余数倒序排列
		   r进制转10进制
		       方法：
		   r进制转为N进制

		   注：十六进制和八进制之间不能直接互换，而必须以二进制做中间进制  



		 编码：计算机内部二进制存储方式
		   学习目标：
		       一个int类型的变量所能存储的数字的范围是多少：
			       int类型变量所能存储的最大正数：7FFF FFFFH  （7 = 0111）
				   int类型变量所能存储的绝对值最大的负整数 8000 0000H   （8 = 1000）
			   最小负数的二进制代码是多少
			   最大正数的二进制代码是多少
			   已知一个整数的二进制代码求出其原始数字
			   数字超过最大整数会怎样
			   不同类型数据的相互转化

		   原码
		       也叫 符号-绝对值码
			   最高位0表示正，1表示负，其余二进制位是该数字的绝对值的二进制位

			   特点：
			     原码简单易懂
				 加减运算复杂
				 存在加减乘除四种运算，增加了CPU的复杂度
				 零的表示不唯一

		   反码
		       反码运算不便，也没在计算机中应用

		   移码
		       移码表示数值平移n位，n称为移码量
			   移码主要用于浮点数的阶码存储

		   补码  
		       十进制转二进制
			       正整数转二进制
				       除2取余，直至商为0，余数倒叙排序
				   负整数转二进制
				       先求与该复数对应的正整数补码，然后将所有位取反，末位加1，不够位时，左边补1
					   不够位：e.g.把-3定义成int型，占32位，则前面是29个1，后面是101，如果以%#X输出时，就是FFFF FFFDH 
					          e.g.int j = -1;printf("%#X\n",j);//输出结果为0XFFFF FFFF
				   零转二进制
				       全是0
			   二进制转十进制
			       如果首位是0，表明是正整数，按普通方法求

				   如果首位是1，表面是负整数
				       将所有位取反，末位加1，所得数字即为该负整数的绝对值
					   e.g. int k = 0XFFFFFFEF;printf("%d\n",k);  //输出结果-17
				   如果全是0，则对应的数字就是0

				   8位2进制补码所代表的十进制存储示例：
				   0000 0000:0
				   0000 00001:1
				   0111 1111:127
				   1000 0000:-128
				   1000 0001:-127
				   1000 0010:-126
				   1111 1111:-1 
                   所以8位2进制码可以表示的整数范围是-128 - 127
				   注：正数128，尽管二进制码是1000 0000，但在计算机中以移码存储，而这段二进制码在移码编码下实际上表示的是-128
				       所以128的二进制码表示，必须在前面加0，这样就超出8位了，叫做溢出
					   e.g.char ch2 = 128;printf("%d\n",ch2);//输出结果为-128
                           //因为128是int型，占4B，把它赋值给char类型，则截去前3B，只剩最后1B，内部存储是1000 0000
                           //计算机按补码存取，则输出结果为-128
					   e.g.char ch3 = 129;printf("%d\n",ch3);//输出结果-127

		
         位运算符：
		   注：需记住各种数据类型所占字节数，如int占4B共32位
		     & -- 与运算符，按位与 只有1&1的结果为1，其他1&0、0&1、0&0的结果都是0
			       && 逻辑与 也叫并且  //逻辑运算符最终的结果只有0，1两种
				   & 和 && 的含义完全不同

			 | -- 或运算符，按位或 只有0|0的结果为0，其他1|1、1|0、0|1的结果都是1
			       || 逻辑或  结果只有0，1两种可能

			 ~ -- 按位取反

			 ^ -- 按位异或，相同为0，不同为1，e.g. 1^0=1,0^1=1,1^1=0,0^0=0

			 << -- 按位左移  i>>1，表示把i的所有二进制位左移一位，右边补0
			       左移n位相当于乘以2的n次方
				   e.g. i=i*8;与i>>3;结果是相同的，但后者速度更快
				   注：前提是有效数据不能丢失

			 >> -- 按位右移  i<<1，表示把i的所有二进制位右移一位，左边补0
			       右移n位相当于除以2的n次方，只留下商，不留余数。
				   注：前提是有效数据不能丢失

			 注：位运算符的现实意义
			     通过位运算符我们可以对数据的操作精确到某一位，而通常我们对数据的操作只能到字节

			 NULL:
			     二进制全部为0的含义 -- 000000000000000的含义
				 1.数值0（补码）
				 2.字符串结束标记符 '\0'
				 3.空指针NULL  -- NULL本质是零，但这个零不是数值意义上的，而是表示内存单元的编号零
                   注：计算机规定了，以零为编号的存储单元的内容不可读，不可写
				       有时使用指针p后，尽管使用free(p);将指针释放了，但编译器可能识别不出来，之后可能还会使用*p=某值，而如果在释放语句后增加一句p=NULL;则编译器一定会检测到这个问题。 

注：C语言中文件，宏，typedef，字符串本教程并没有涉及到






				 
				 
				 
				 
	 
	 
	 
	 
	 
	 
	 
	 