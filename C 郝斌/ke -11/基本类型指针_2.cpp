/**
      实参和形参，理解什么叫函数调用！

      说明：
      1.程序从main开始执行，并从main结束，对本程序而言，先是在a,b声明是开辟两个内存空间，编号以标志a,b，其中存放内容分别是3,5
      2.然后，main函数在执行到swap_1时，编译器看到一串字符+括号，判断为函数调用，又由于找到一个名为swap_1的函数，其形参为两个int型变量,匹配，则调用该swap_1函数。
      3.对于swap_1函数，首先给两个形参i,j开辟新的内存空间，编号地址，并以i,j为变量名，t变量也同样操作
      4.由于函数调用时，将实参的值发送给形参，则i,j变量的内寸空间中分别存储5，3，然后交换i,j中的内容，但已经与a,b无关
      5.待swap_1运行结束后，自动释放i,j,t的内存空间，其中的内容也清空。但a,b中的内容不受影响。
      6.此时，a,b中的值仍然是5,3。

*/

#include<stdio.h>

void swap_1(int i,int j)
{
    int t;
    t = i;
    i = j;
    j = t;
}

void swap_2(int *p,int *q)   //形参名字是p,q，接收实参数据的是p,q，而不是*p,*q。
{
    int t;
    t = *p;
    *p = *q;
    *q = t;    
}                              //此时，尽管p,q已经被释放了，但a,b的值已经被改变了

int main(void)
{
	int a = 5;
    int b = 3;

    swap_1(a,b);   // a,b与i,j不是(分别对应的)同一个变量，不能互换a,b。

    printf("a = %d, b = %d\n",a,b);

    swap_2(&a,&b);  //之所以发送&a,&b是因为swap_2中的形参定义的变量是p,q而不是*p,*q。
    printf("a = %d, b = %d\n",a,b);

	
	return 0;
}
