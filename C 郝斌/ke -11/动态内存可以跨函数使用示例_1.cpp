/**
    2020年4月15日  18点38分
    说明：一个函数内所创造的(动态)空间，可以在另一个函数中被使用，而不论原函数是否执行结束。
*/

#include<stdio.h>
#include<malloc.h>

void f(int **q)
{
    *q = (int *)malloc(sizeof(int)); //sizeof(数据类型) 返回值是该数据类型所占的字节数
    //此时等价于 p = (int *)malloc(4);
    **q = 5;
    //q = 5;   // 错误，q中存放的是p的地址
    //*q = 5;  // 错误，*q等价于p，p是一个指针变量，不能存储整型变量，只能存储整型变量的地址
    //此时,q指向的4B空间只被分配，没有被手动释放。
    *(*q+2) = 33;
}

int main(void)
{
	int *p;

    f(&p);  //函数执行结束，即函数终止的本质是出栈，静态内存存储于栈中，动态内存存储在堆中。所以q还存在

    printf("*p = %d\n",*p);
    //没有错误
    //p指向的这4B仍然保存着，是第10行中由malloc动态分配的，动态分配存储在堆里面，函数执行结束后不会被系统自动释放
    printf("*(p+1) = %d\n",*(p+1));  //*(p+1) = 0
    printf("*(p+2) = %d\n",*(p+2));  //*(p+2) = 33
	
	return 0;
}
